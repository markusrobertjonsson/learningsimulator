*******************
Virtual environment
*******************

Windows
=======
C:\my_proj> python.exe -m venv /path/to/new/virtual/environment

C:\my_proj> python.exe -m venv my_env
(This creates the folder C:\my_proj\my_env)

Activate
--------
C:\my_proj> <venv>\Scripts\activate(.bat)
where <venv> is the path to the virtual environment

Example:
C:\my_proj> C:\my_proj\my_env\Scripts\activate(.bat)
C:\my_proj> .\my_env\Scripts\activate(.bat)

Activate (temporarily) adds C:\myproj\my_env\Scripts\ to PATH.
Deactivate removes it.

Deactivate
----------
C:\my_proj> C:\my_proj\my_env\Scripts\deactivate(.bat)
C:\my_proj> deactivate

This removes C:\my_proj\my_env\Scripts\ from PATH.

Delete (just delete the folder)
-------------------------------
C:\my_proj> del my_env


******************
Install matplotlib
******************

python -m pip install -U pip
python -m pip install -U matplotlib


*******************
Run tests like this
*******************

Ubuntu (med Python 3.6):
========================

Run a specific test file:
-------------------------
markus-laptop:~/lesim/lesim2$ python -m unittest -v tests/test_beta.py

Run all test files
------------------
markus-laptop:~/lesim/lesim2$ python -m unittest -v tests/test_*.py


Windows (med Python 3.8):
=========================

Run a specific test file:
-------------------------
C:\Users\markj\lesim>C:\Python38\python.exe -m unittest -v tests/test_beta.py

or, with pytest:

C:\Users\markj\lesim>pytest tests/test_beta.py

Run all test files (that starts with "test_")
---------------------------------------------
Make sure there is an empty file __init__.py in the test folder
C:\Users\markj\lesim>C:\Python38\python.exe -m unittest -v
(-v is verbose)

or, with pytest:

C:\Users\markj\lesim>pytest [tests]

To use a different Python installation, for example:

C:\Users\markj\lesim\learningsimulator> C:\Python38\python.exe -m pytest


*************************
Build EXE-file on Windows
*************************
Make sure lesim.spec contains "datas=[('Lemur-icon.gif', '.')]"
In the virtualenv:
    pip install -U pyinstaller
    pyinstaller.exe -F -w --add-data Lemur-icon.gif;. lesim.py 
(The option -w makes sure that the created exe-file will not open a console window (stdin/out for Python))
This creates C:\Users\markj\lesim\lesim2\dist\lesim.exe

copy C:\Users\markj\lesim\lesim2\dist\lesim.exe  C:\Users\markj\lesim\learningsimulator.exe

*****
Debug
*****
python -m pdb my_program.py
python -m winpdb my_program.py (Graphical debugger on Windows)

Winpdb no install mode
----------------------
python /the/path/to/winpdb.py my_program.py


**********
Docs build
**********

Requires packages sphinx and recommonmark:
pip install sphinx
pip install recommonmark

In the docs folder, run

make html (which is short for
sphinx-build -b html C:\...\docs C:\...\docs\_build)


********
Coverage
********
Use Coverage.py (https://coverage.readthedocs.io/en/coverage-5.3, "pip install coverage").

coverage run -m pytest [tests]
C:\Python38\Scripts\coverage.exe run -m pytest [tests]

This creates the file .coverage in the directory where the tests were run.

Convert coverage data (.coverage) to (readable) html:
C:\Python38\Scripts\coverage.exe html
This creates the folder htmlcov in the directory where the tests were run.

Generate coverage badge
=======================
Use coverage-badge (https://pypi.org/project/coverage-badge, "pip install coverage-badge").

After above test has run and .coverage has been created:

C:\Users\markj\lesim\lesim2>C:\Python38\Scripts\coverage-badge.exe -o coverage.svg

This creates the file coverage.svg.

***
Git
***

Find remote repository
======================
git config --get remote.origin.url

To list all commits since last tag (also possible in GitHub on "Releases" page
(e.g. github.com/learningsimulator/learningsimulator/releases) by clicking
"n commits to master since this release".
==================================
git log $(git describe --tags --abbrev=0)..HEAD --no-merges --oneline > new-in-this-release.log

Automatically add any changes to tracked files, and commit
==========================================================
git commit -a
or
git commit -am "Commit message."

Show the diff that you are about to commit
==========================================
git diff --staged
